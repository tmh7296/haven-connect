{"remainingRequest":"/Users/timhenderson/repositories/havenconnect/test-app/node_modules/ts-loader/index.js??ref--16-1!/Users/timhenderson/repositories/havenconnect/test-app/src/components/pokemonInfo.tsx","dependencies":[{"path":"/Users/timhenderson/repositories/havenconnect/test-app/src/components/pokemonInfo.tsx","mtime":1575994012110},{"path":"/Users/timhenderson/repositories/havenconnect/test-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/timhenderson/repositories/havenconnect/test-app/node_modules/ts-loader/index.js","mtime":1545640398000}],"contextDependencies":[],"result":["var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n    return cooked;\n};\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Card from '@material-ui/core/Card/Card';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { gql } from 'apollo-boost';\nimport * as React from 'react';\nimport { Query } from 'react-apollo';\nimport '../styles/_infoStyles.css';\nvar POKE_DATA = gql(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\\n  query pokemon($name: String!) {\\n    pokemon(name: $name) {\\n      id\\n      number\\n      name\\n      maxHP\\n      evolutions {\\n        name\\n      }\\n    }\\n  }\\n\"], [\"\\n  query pokemon($name: String!) {\\n    pokemon(name: $name) {\\n      id\\n      number\\n      name\\n      maxHP\\n      evolutions {\\n        name\\n      }\\n    }\\n  }\\n\"])));\nexport var PokemonInfo = function (props) {\n    var image;\n    var stats = {\n        name: '?',\n        id: '?',\n        number: '?',\n        maxHP: '?',\n        evolutions: '?'\n    };\n    var handleClick = function (name) {\n        props.selectPokemon(name);\n    };\n    return !props.name ? null : (React.createElement(Query, { query: POKE_DATA, variables: { name: props.name } }, function (_a) {\n        var loading = _a.loading, error = _a.error, data = _a.data;\n        if (loading) {\n            image = React.createElement(CircularProgress, { className: \"loading\" });\n        }\n        else if (error) {\n            image = (React.createElement(\"img\", { src: \"http://ichno.org/dokuwiki/lib/exe/fetch.php?cache=&media=characters:placeholder.png\", className: \"pkm-img\" }));\n            Object.keys(stats).map(function (stat) {\n                stats[stat] = 'error';\n            });\n        }\n        else {\n            image = (React.createElement(\"img\", { src: \"https://assets.pokemon.com/assets/cms2/img/pokedex/full/\" + data.pokemon.number + \".png\", className: \"pkm-img\" }));\n            Object.keys(stats).map(function (stat) {\n                if (stat === 'evolutions') {\n                    if (!data.pokemon[stat]) {\n                        return (stats[stat] = 'None');\n                    }\n                    var buttons = data.pokemon[stat].map(function (pokemon) { return (React.createElement(Button, { onClick: function () { return handleClick(pokemon.name); }, value: pokemon.name, key: pokemon.name }, pokemon.name)); });\n                    stats[stat] = (React.createElement(Grid, { container: true, spacing: 1, direction: \"column\", alignItems: \"center\" },\n                        React.createElement(Grid, { item: true },\n                            React.createElement(ButtonGroup, { size: \"small\", \"aria-label\": \"small outlined button group\" }, buttons))));\n                }\n                else {\n                    stats[stat] = data.pokemon[stat];\n                }\n            });\n        }\n        return (React.createElement(Card, null,\n            React.createElement(\"div\", { className: \"pkm-img-container\" }, image),\n            React.createElement(Paper, null,\n                React.createElement(Table, { \"aria-label\": \"simple table\" },\n                    React.createElement(TableBody, null, Object.keys(stats).map(function (stat) { return (React.createElement(TableRow, { key: stat },\n                        React.createElement(TableCell, { component: \"th\", scope: \"row\" },\n                            React.createElement(\"b\", null, stat.charAt(0).toUpperCase() + stat.slice(1))),\n                        React.createElement(TableCell, { align: \"right\" }, stats[stat]))); }))))));\n    }));\n};\nvar templateObject_1;\n",{"version":3,"file":"/Users/timhenderson/repositories/havenconnect/test-app/src/components/pokemonInfo.tsx","sourceRoot":"","sources":["/Users/timhenderson/repositories/havenconnect/test-app/src/components/pokemonInfo.tsx"],"names":[],"mappings":"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","sourcesContent":["import Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Card from '@material-ui/core/Card/Card';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { gql } from 'apollo-boost';\nimport * as React from 'react';\nimport { Query } from 'react-apollo';\nimport '../styles/_infoStyles.css';\n\nconst POKE_DATA = gql`\n  query pokemon($name: String!) {\n    pokemon(name: $name) {\n      id\n      number\n      name\n      maxHP\n      evolutions {\n        name\n      }\n    }\n  }\n`;\n\ninterface InfoProps {\n  selectPokemon: React.Dispatch<React.SetStateAction<string>>;\n  name: string;\n}\n\ninterface Evolution {\n  name: string;\n}\n\nexport const PokemonInfo = (props: InfoProps) => {\n  let image: JSX.Element;\n  // type 'any' because we're going to store strings/react-nodes in here\n  const stats: any = {\n    name: '?',\n    id: '?',\n    number: '?',\n    maxHP: '?',\n    evolutions: '?'\n  };\n\n  const handleClick = (name: string): void => {\n    props.selectPokemon(name);\n  };\n\n  return !props.name ? null : (\n    <Query query={POKE_DATA} variables={{ name: props.name }}>\n      {({ loading, error, data }) => {\n        if (loading) {\n          // during load, displaying loading indicator\n          image = <CircularProgress className=\"loading\"/>;\n        } else if (error) {\n          // replace image and stats with error denoations\n          image = (\n            <img\n              src=\"http://ichno.org/dokuwiki/lib/exe/fetch.php?cache=&media=characters:placeholder.png\"\n              className=\"pkm-img\"\n            />\n          );\n          Object.keys(stats).map(stat => {\n            stats[stat] = 'error';\n          });\n        } else {\n          // happy path\n          image = (\n            <img\n              src={`https://assets.pokemon.com/assets/cms2/img/pokedex/full/${data.pokemon.number}.png`}\n              className=\"pkm-img\"\n            />\n          );\n          // display stats\n          Object.keys(stats).map(stat => {\n            // make evolutions clickable buttons\n            if (stat === 'evolutions') {\n              if (!data.pokemon[stat]) {\n                return (stats[stat] = 'None');\n              }\n              const buttons = data.pokemon[stat].map((pokemon: Evolution) => (\n                <Button onClick={() => handleClick(pokemon.name)} value={pokemon.name} key={pokemon.name}>\n                  {pokemon.name}\n                </Button>\n              ));\n              // button grid\n              stats[stat] = (\n                <Grid container spacing={1} direction=\"column\" alignItems=\"center\">\n                  <Grid item>\n                    <ButtonGroup size=\"small\" aria-label=\"small outlined button group\">\n                      {buttons}\n                    </ButtonGroup>\n                  </Grid>\n                </Grid>\n              );\n            } else {\n              // add normal stat to table\n              stats[stat] = data.pokemon[stat];\n            }\n          });\n        }\n        return (\n          <Card>\n            <div className=\"pkm-img-container\">{image}</div>\n            <Paper>\n              <Table aria-label=\"simple table\">\n                <TableBody>\n                  {Object.keys(stats).map(stat => (\n                    <TableRow key={stat}>\n                      <TableCell component=\"th\" scope=\"row\">\n                        <b>{stat.charAt(0).toUpperCase() + stat.slice(1)}</b>\n                      </TableCell>\n                      <TableCell align=\"right\">{stats[stat]}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </Paper>\n          </Card>\n        );\n      }}\n    </Query>\n  );\n};\n"]}]}